<?php
  /**
   * Implements hook_menu.
   *
   * @return array
   */
  function uc_raffle_menu() {
    $menuItems = array();
    // Configuration page
    $menuItems['admin/store/settings/uc_raffle']      = array(
      'title'            => t("Raffle"),
      'description'      => "Allows settings to be made for running raffles",
      'page callback'    => "drupal_get_form",
      'page arguments'   => array("uc_raffle_admin"),
      "access arguments" => array("administer store"),
      'type'             => MENU_NORMAL_ITEM
    );
    $menuItems['admin/store/reports/raffle_tickets']  = array(
      'title'            => t("Raffle report"),
      'description'      => t("A report containing information on the raffle tickets that have been sold"),
      'page callback'    => "uc_raffle_report",
      'access arguments' => array("view raffle report"),
      'type'             => MENU_NORMAL_ITEM
    );
    $menuItems['admin/store/raffle/email_order/%'] = array(
      'title' => t("Email raffle tickets"),
      "description" => t("Emails the tickets for an order to the order's primary email"),
      'page callback' => "uc_raffle_email_tickets_order",
      "page arguments" => array(4),
      "access arguments" => array("email order raffle tickets"),
      'type' => MENU_CALLBACK
    );
    $menuItems["admin/store/orders/%uc_order/raffle"] = array(
      'title'            => t('Raffle Tickets'),
      'page callback'    => 'uc_raffle_tickets_pane',
      'page arguments'   => array(3),
      'access callback' => "uc_raffle_access_order_page",
      'access arguments' => array(3),
      'type'             => MENU_LOCAL_TASK,
      'weight'           => 5,
    );
    $menuItems['user/%user/orders/%uc_order/raffle'] = array(
      'title' => 'View Raffle Tickets',
      'description' => 'View raffle tickets for the order.',
      'page callback' => 'uc_raffle_tickets_pane',
      'page arguments' => array(3),
      'access callback' => 'uc_raffle_access_order_page',
      'access arguments' => array(3),
    );
    return $menuItems;
  }

  /**
   * Callback for allowing access to the order page for customers.
   *
   * @param $order
   *
   * @return bool
   */
  function uc_raffle_access_order_page($order){
    global $user;
    // check access
    if ($user->uid === $order->uid){
      $access = user_access('view own orders');
    }
    else {
      $access = user_access("view all orders");
    }
    // Check that the order has a raffle ticket
    $tickets = uc_raffle_get_tickets_by_order($order->order_id);
    if (!empty($tickets)){
      return $access;
    }
    return false;
  }

  /**
   * Implementation of hook_permission.
   *
   * @return array The permissions implemented for this module.
   */
  function uc_raffle_permission() {
    $permissions                                 = array();
    $permissions["view raffle report"]           = array(
      "title" => t("View the list of generated raffle tickets"),
    );
    $permissions['email order raffle tickets'] = array(
      "title" => t("Send the raffle tickets generated for an order")
    );
    return $permissions;
  }

  /**
   * This function generates a render array for the raffle report.
   *
   * @return array
   */
  function uc_raffle_report($product = FALSE) {
    $render     = array();
    $rows       = uc_raffle_get_all_tickets($product);
    $renderRows = '';
    if (!empty($rows)) {
      foreach ($rows as $row) {
        $rowElements = array($row->email, l($row->title, "admin/store/reports/raffle_tickets/" . $row->nid), l("Order", "admin/store/orders/" . $row->order_id), $row->code);
        $renderRows .= theme("uc_raffle_report_row", array("row" => $rowElements));
      }
    }
    $render['raffle-list'] = array(
      "table" => array(
        "#prefix"      => "<table>",
        '#suffix'      => "</table>",
        "table-header" => array(
          '#type'   => "markup",
          '#markup' => theme("uc_raffle_report_header")
        ),
        "table-rows"   => array(
          '#type'   => "markup",
          '#markup' => $renderRows
        )
      )
    );
    return $render;
  }

  /**
   * Returns a list of all purchased raffle tickets.
   */
  function uc_raffle_get_all_tickets($product) {
    $query = db_select("uc_raffle_ticket", "r");
    $query->fields("r", array("rtid", "code", "email", "order_id"));
    $query->join("uc_order_products", "op", "op.order_product_id = r.order_product_id");
    if ($product) {
      $query->condition("op.nid", $product, "=");
    }
    $query->fields("op", array("nid", "title"));
    $results = $query->execute();
    return $results;
  }

  /**
   * Callback for configuration page.
   */
  function uc_raffle_admin() {
    $form                            = array();
    $form['uc_raffle_email_subject'] = array(
      '#type'          => "textfield",
      '#title'         => t("Email subject"),
      '#description'   => t("This will be inserted as the text in the subject of the email sent containing raffle codes"),
      '#default_value' => variable_get("uc_raffle_email_subject", t("Your raffle tickets"))
    );
    $allClasses                      = uc_product_class_load();
    $classes                         = array();
    if (!empty($allClasses)) {
      foreach ($allClasses as $class) {
        $classes[$class->pcid] = $class->name;
      }
    }
    $form['uc_raffle_product_classes'] = array(
      '#type'          => "select",
      '#title'         => t("Product Classes"),
      '#description'   => t("Select the product class (or classes) that you wish to treat as raffle tickets (all members of the class will be treated as tickets)"),
      '#default_value' => variable_get("uc_raffle_product_classes", array()),
      '#options'       => $classes,
      '#multiple'      => TRUE
    );
    return system_settings_form($form);
  }

  /**
   * Implements hook_theme.
   *
   * @return array
   */
  function uc_raffle_theme() {
    $items = array();
    $path  = drupal_get_path("module", "uc_raffle") . '/templates';
    // A theme template for sending a list of generated tickets to a user
    // Tickets are provided already sorted by order_product_id
    $items['uc_raffle_email_tickets'] = array(
      "variables" => array("products" => array()),
      "path"      => $path,
      "template"  => "uc_raffle_email_tickets",
    );
    $items['uc_raffle_report_header'] = array(
      'path'     => $path,
      'template' => "uc_raffle_report_header"
    );
    $items['uc_raffle_report_row']    = array(
      'variables' => array("row" => NULL),
      'path'      => $path,
      'template'  => "uc_raffle_report_row"
    );
    // The page with all the raffle tickets from an order
    $items['uc_raffle_tickets_order'] = array(
      'variables' => array("tickets" => array(), "order"=>FALSE),
      'path' => $path,
      'template' => "uc_raffle_tickets_order"
    );
    return $items;
  }

  /**
   * Implements hook_uc_order.
   *
   * This function is designed to catch all instances of a raffle ticket product being in a completed (and paid order),
   * these tickets should be added to the database and the user should receive an email with the raffle ticket codes.
   *
   * @todo send email or prepare to do email later.
   *
   * @param $op
   * @param $order
   * @param $arg2
   */
  function uc_raffle_uc_order($op, &$order, $arg2) {
    if ($op == 'update' && $order->order_status == 'pending' && $arg2 == 'payment_received') {
      if (!empty($order->products)) {
        $tickets = array();
        $classes = variable_get("uc_raffle_product_classes", array());
        foreach ($order->products as $product) {
          if (in_array($product->data['type'], $classes)) {
            $qty = (int)$product->qty;
            if (!empty($product->data['attributes']) &&
              isset($product->data['attributes']['Number of raffle tickets'])
            ) {
              $multiplier = 1;
              if (!empty($product->data['attributes']['Number of raffle tickets'])) {
                foreach ($product->data['attributes']['Number of raffle tickets'] as $value) {
                  $multiplier = (int)$value;
                  watchdog("uc_raffle", "@multi multiplier used for user @email", array("@multi" => $multiplier, "@email" => $order->primary_email));
                }
              }

              $qty = $qty * $multiplier;
            }
            watchdog("uc_raffle", "@qty tickets required for user @email and product @pid", array("@qty" => $qty, "@email" => $order->primary_email, "@pid" => $product->order_product_id));
            for ($i = 1; $i <= $qty; $i++) {
              $tickets[] = uc_raffle_create_ticket($product->order_id, $product->order_product_id, $order->primary_email);
            }
          }
        }
      }
      if (!empty($tickets)) {
        uc_raffle_email_tickets($tickets, $order->primary_email);
        watchdog("uc_raffle", "@ticketNumber tickets generated for @email", array("@ticketNumber" => count($tickets), "@email" => $order->primary_email));
      }
    }
  }

  function uc_raffle_email_tickets_order($order){
    if (is_numeric($order)){
      $order = uc_order_load($order);
    }
    if (!isset($order->order_id)){
      drupal_goto();
    }
    $tickets = uc_raffle_get_tickets_by_order($order->order_id);
    if (empty($tickets)){
      drupal_goto();
    }
    uc_raffle_email_tickets($tickets, $order->primary_email);
    drupal_goto();
  }

  /**
   * Takes a set of tickets and emails the ticket codes to the address associated with the tickets.
   */
  function uc_raffle_email_tickets($tickets, $email) {
    // Split tickets up by product ID
    $products = array();
    if (!empty($tickets)) {
      foreach ($tickets as $ticket) {
        if (!is_array($ticket)){
          $ticket = (array) $ticket;
        }
        if (isset($products[$ticket['order_product_id']])) {
          $products[$ticket['order_product_id']]["tickets"][] = $ticket;
        } else {
          $orderProduct                                     = db_query("SELECT title, nid FROM {uc_order_products} WHERE order_product_id = :id", array(':id' => $ticket['order_product_id']))->fetchObject();
          $products[$ticket['order_product_id']]            = array("title" => $orderProduct->title, "nid" => $orderProduct->nid);
          $products[$ticket['order_product_id']]["tickets"] = array($ticket);
        }
      }
    }
    $from                = variable_get("uc_store_email");
    $settings            = array(
      'from'      => $from,
      'addresses' => array($email),
      'subject'   => variable_get("uc_raffle_email_subject", t("Your raffle tickets")),
    );
    $settings['message'] = theme("uc_raffle_email_tickets", array("products" => $products));
    $sentDetails         = drupal_mail("uc_raffle", "uc_raffle_email_tickets", $email, uc_store_mail_recipient_language($email), $settings, $from);
    if (!$sentDetails['result']) {
      watchdog("uc_raffle", "Attempt to email @email about raffle tickets with order_product_id(s) @products failed",
        array("@email" => $email, "@products" => implode(", ", array_keys($products))));
    }
  }

  /**
   * Implements hook_mail.
   */
  function uc_raffle_mail($key, &$message, $params) {
    switch ($key) {
      case "uc_raffle_email_tickets":
        $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed';
        $message['from']                    = $params['from'];
        $message['body'][]                  = $params['message'];
        $message['subject']                 = $params['subject'];
        break;
    }
  }

  /**
   * Creates a raffle ticket and inserts it into the database.
   *
   * @param $order_id
   * @param $order_product_id
   * @param $email
   *
   * @return bool|int
   */
  function uc_raffle_create_ticket($order_id, $order_product_id, $email) {
    $code       = uc_raffle_generate_raffle_code();
    $codeExists = db_query("SELECT COUNT(*) FROM {uc_raffle_ticket} WHERE code=:code", array(":code" => $code))->fetchField();
    // Check that the code doesn't yet exist
    if ($codeExists) {
      while ($codeExists) {
        $code       = uc_raffle_generate_raffle_code();
        $codeExists = db_query("SELECT COUNT(*) FROM {uc_raffle_ticket} WHERE code=:code", array(":code" => $code))->fetchField();
      }
    }
    $ticket       = array("email" => $email, "order_id" => $order_id, "order_product_id" => $order_product_id, "code" => $code);
    $ticket['id'] = drupal_write_record("uc_raffle_ticket", $ticket);
    watchdog("uc_raffle", "Ticket created with code @code for user @email", array("@code" => $code, "@email" => $email));
    return $ticket;
  }

  /**
   * Generates a UUID to apply to a raffle ticket.
   *
   * This is based on the comment http://www.php.net/manual/en/function.uniqid.php#94959 for generating a UUID
   *
   * @return string
   */
  function uc_raffle_generate_raffle_code() {
    return sprintf('%04x%04x-%04x-%04x-%04x-%04x%04x%04x',

      // 32 bits for "time_low"
      mt_rand(0, 0xffff), mt_rand(0, 0xffff),

      // 16 bits for "time_mid"
      mt_rand(0, 0xffff),

      // 16 bits for "time_hi_and_version",
      // four most significant bits holds version number 4
      mt_rand(0, 0x0fff) | 0x4000,

      // 16 bits, 8 bits for "clk_seq_hi_res",
      // 8 bits for "clk_seq_low",
      // two most significant bits holds zero and one for variant DCE1.1
      mt_rand(0, 0x3fff) | 0x8000,

      // 48 bits for "node"
      mt_rand(0, 0xffff), mt_rand(0, 0xffff), mt_rand(0, 0xffff)
    );
  }

  /**
   * A page for displaying the raffle tickets in any given order.
   *
   * @param $order
   *
   * @return array
   */
  function uc_raffle_tickets_pane($order) {
    $tickets = uc_raffle_get_tickets_by_order($order->order_id);
    $render       = array("#type" => "markup");
    $render['#markup'] = theme("uc_raffle_tickets_order", array("tickets"=>$tickets, "order"=>$order));
    return $render;
  }

  /**
   * Get all the raffle tickets for a specified order.
   *
   * @param $orderID
   *
   * @return array
   */
  function uc_raffle_get_tickets_by_order($orderID) {
    $query   = db_query("SELECT * FROM {uc_raffle_ticket} WHERE order_id=:id", array(":id" => $orderID));
    $tickets = array();
    while (($ticket = $query->fetchObject()) !== FALSE) {
      $tickets[] = $ticket;
    }
    return $tickets;
  }
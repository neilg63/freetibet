<?php

/**
 * @file
 * Miscellaneous overrides for Freetibet site
 */

define('FTOVERRIDES_SHOPIFY_PRODUCT_TEASER_IMAGE_DISPLAY_MODE', 'last');

function ftoverrides_form_search_block_form_alter(&$form,&$form_state,$form_id) {

	$form['background'] = array(
		'#type' => 'markup',
		'#markup' => '<div class="icon-search"></div>'
	);
	$form['search_block_form']['#attributes']['placeholder'] = t('Search');
	$form['actions']['submit']['#value'] = t('Go');
}

/*
 * implements hook_node_view
*/
function ftoverrides_node_view($node,$view_mode) {
	switch ($node->type) {
		case 'media_section':
		case 'text':
		case 'box':
		case 'take_action':
		case 'key_points':
			if (node_is_page($node)) {
				$nid = ftoverrides_fetch_parent_nid($node);
				if ($nid > 0) {
					drupal_goto('node/' . $nid);
				}
			}
			$override_view_modes = array('full','default');
			if (in_array($view_mode,$override_view_modes)) {
				$mode = 'full';
				$items = field_get_items('node',$node,'field_layout_mode');
				if (!empty($items) && isset($items[0]) && isset($items[0]['value']) && is_string($items[0]['value'])) {
					$mode = $items[0]['value'];
				}
				if (!empty($items) && isset($items[0]) && isset($items[0]['value']) && is_string($items[0]['value'])) {
					$mode = $items[0]['value'];
				}
			
				$show_title = true;
				if (isset($node->field_show_title)) {
					$show_title = false;
					$items = field_get_items('node',$node,'field_show_title');
					if (!empty($items) && isset($items[0]) && isset($items[0]['value']) && is_numeric($items[0]['value'])) {
						$show_title = (bool) $items[0]['value'];
					}
					if ($mode != 'full' && empty($node->page_viewmode)) {
						$node->page_viewmode = $mode;
						$node->content = node_view($node,$mode);
					}
					if (!$show_title && isset($node->content['title'])) {
						unset($node->content['title']);
					}
				}
			}
			break;
		case 'donation':
			if (isset($node->content['add_to_cart']) && isset($node->content['add_to_cart']['#form'])) {
				$add_to_cart_form =& $node->content['add_to_cart']['#form'];
				if (isset($add_to_cart_form['donate_amount']) && isset($add_to_cart_form['varprice'])) {
					$add_to_cart_form['donate_amount'] = array(
						'#type' => 'hidden',
						'#name' => 'donate_amount',
						'#value' => $add_to_cart_form['varprice']['#default_value']
					);
				}
			}
			break;
		case 'page':
			ftoverrides_set_first_page_section_position($node,$view_mode);
			break;
	}
}

function ftoverrides_node_presave($node) {
  module_load_include('inc','ftoverrides','ftoverrides.edit');
  _ftoverrides_node_presave($node);
}

function ftoverrides_set_first_page_section_position($node,$view_mode) {
	if ($view_mode == 'full' && isset($node->field_page_sections) && isset($node->content['field_page_sections']) && isset($node->content['top'])) {
		$move_first_page_section = _ftoverrides_set_first_page_section_position($node,$view_mode);
	}
	if (!$move_first_page_section  && isset($node->content['top'])) {
		unset($node->content['top']);
	}
}

function _ftoverrides_set_first_page_section_position($node,$view_mode) {
	$move_first_page_section = false;
	if (isset($node->content['field_page_sections']['#items']) && is_array($node->content['field_page_sections']['#items'])) {
		$num_items = count($node->content['field_page_sections']['#items']);
		if ($num_items > 0 ) {
			
			$field_items = field_get_items('node',$node,'field_section_position');
			if (!empty($field_items) && isset($field_items[0]['value'])) {
				$value = (int) $field_items[0]['value'];
				if ($value > 0) {
					$move_first_page_section = true;
					$setSliderWeight = false;
					switch ($value) {
						case 2:
							$setSliderWeight = isset($node->content['field_slide']);
							break;
					}
				}
			}
			if ($move_first_page_section) {
				$items = $node->content['field_page_sections']['#items'];
				$firstItem = array_shift($items);
				$last_index = $num_items - 1;

				for ($i=0;$i < $num_items;$i++) {
					if ($i == 0) {
						$firstRenderItem = $node->content['field_page_sections'][$i];
					}
					if ($i < $last_index) {
						$node->content['field_page_sections'][$i] = $node->content['field_page_sections'][($i+1)];
					}
					else {
						unset($node->content['field_page_sections'][$i]);
					}
				}
				$node->content['field_page_sections']['#items'] = $items;
			}
			$node->content['top']['#items'] = array($firstItem);
			$node->content['top'][0] = array(
				'#markup' => render($firstRenderItem)
			);
			if ($setSliderWeight) {
				$node->content['top']['#weight'] = -1000;
				$node->content['field_slide']['#weight'] = -999;
			}
		}
	}
	return $move_first_page_section;
}

/*
 * Implements hook_ds_fields_info
*/

function ftoverrides_ds_fields_info($entity_type) {
	$fields = array();

	switch ($entity_type) {
		case 'file':
			$fields['related_text'] = array(
					'title' => t('Text in referencing entity'),
					'field_type' => DS_FIELD_TYPE_FUNCTION,
					'function' => 'ftoverrides_related_text',
					'properties' => array(
							'settings' => array(
							),
					)
			);
			return array($entity_type => $fields);
			break;
		case 'node':
			$fields['top'] = array(
					'title' => t('Target top section'),
					'field_type' => DS_FIELD_TYPE_FUNCTION,
					'function' => 'ftoverrides_top_section',
					'properties' => array(
							'settings' => array(
							),
					)
			);
			return array($entity_type => $fields);
			break;
  	case 'shopify_product':
      
  		$fields['shopify_title_link'] = array(
  				'title' => t('Title link to Shopify product page'),
  				'field_type' => DS_FIELD_TYPE_FUNCTION,
  				'function' => 'ftoverrides_shopify_title_link',
  		);
      
  		$fields['shopify_image_link'] = array(
  				'title' => t('Image link to Shopify product page'),
  				'field_type' => DS_FIELD_TYPE_FUNCTION,
  				'function' => 'ftoverrides_shopify_image_link',
  		);
      
  		$fields['shopify_detail_link'] = array(
  				'title' => t('View more link to Shopify product page'),
  				'field_type' => DS_FIELD_TYPE_FUNCTION,
  				'function' => 'ftoverrides_shopify_detail_link',
  		);
  		return array($entity_type => $fields);  
	}
	return;
}

function ftoverrides_top_section($field) {
	if (isset($field['entity']) && is_object($field['entity']) && $field['entity_type'] == 'node') {
		return t("Top section");
	}
}


function ftoverrides_fetch_parent_nid($node) {
	$query = new EntityFieldQuery();
	$query->entityCondition('entity_type', 'node')
	->fieldCondition('field_page_sections', 'target_id', $node->nid, '=');
	$result = $query->execute();
	if (is_array($result) && isset($result['node']) && is_array($result['node']) && !empty($result['node'])) {
		$nids = array_keys($result['node']);
		return array_shift($nids);
	}
	return 0;
}

function ftoverrides_related_text($field) {
	if (isset($field['entity']) && is_object($field['entity']) && $field['entity_type'] == 'file') {
		$text = '';
		$entity = $field['entity'];
		if ($entity->referencing_entity instanceof FieldCollectionItemEntity) {
			if (isset($entity->referencing_entity->field_text)) {
				$items = field_get_items('field_collection_item',$entity->referencing_entity,'field_text');
				if (is_array($items) && !empty($items) && isset($items[0]['safe_value'])) {
					if (is_string($items[0]['safe_value'])) {
						return $items[0]['safe_value'];
					}
				}
			}
			return $text;
		}
	}
}


function ftoverrides_form_node_form_alter(&$form, $form_state, $form_id) {
	module_load_include('inc','ftoverrides','ftoverrides.edit');
	_ftoverrides_form_node_form_alter($form,$form_state,$form_id);
}

function ftoverrides_get_available_view_modes($bundle = NULL) {
	$view_modes = array();
	$prefix = 'field_bundle_settings_node__';
	$data = variable_get($prefix . $bundle, NULL);
	$excludeViewModes = array('search_index','summary','teaser','default','full');
	$view_modes = array(
			'full' => 'Full (Default full page view)',
	);
	if (is_array($data) && isset($data['view_modes']) && is_array($data['view_modes']) && !empty($data['view_modes'])) {
		foreach ($data['view_modes'] as $name => $data) {
			if ($data['custom_settings'] && !in_array($name,$excludeViewModes)) {
				$view_modes[$name] = $name;
			}
		}
	}
	return $view_modes;
}


function ftoverrides_wysiwyg_editor_settings_alter(&$settings, $context) {
	if ($context['profile']->editor == 'ckeditor') {
		switch ($context['profile']->format) {
			case 'full_html':
				$settings['height'] = 360;
				break;
			case 'filtered_html':
				$settings['height'] = 200;
				break;
		}
	}
}

function ftoverrides_form_payment_donation_form_alter(&$form,&$form_state,$form_id) {
  if (isset($form['payment_method']) && isset($form['payment_method']['#pmids'])) {
    $pmids = $form['payment_method']['#pmids'];
    $context = request_path();
    $parts = explode('/',$context);
    if (count($parts)>1) {
      $context = array_shift($parts);
    }
    if (is_array($pmids) && count($pmids) == 1) {
      
      
      
      switch ($context) {
        case 'join':
          $submitLabel = t("Join");
          break;
        default:
          $submitLabel = t("Donate");
          break;
      }
      
      $form['context'] = array(
        '#type' => 'hidden',
        '#value' => $context,
        '#attributes' => array('id' => 'edit-context')
      );
      
      drupal_add_js(drupal_get_path('module','ftoverrides') . '/js/donate.js');
      $pmid = array_shift($pmids) ;
      $query = db_select('payment_method','pm')->fields('pm');
      $query->condition('pm.pmid',$pmid);
      $result = $query->execute();
      if ($result) {
        $pm = $result->fetch();
        $method_label = t("Pay by");
        
        $presets = ftoverrides_donation_presets($context);
        if (!empty($presets)) {
          $form['presets'] = array(
            '#type' => 'markup',
            '#markup' => theme_ftoverrides_donation_presets(array('items' => $presets))
          );
        }
        
        $form['payment_method']['#title'] = $method_label;
        $min_amount = variable_get('ftoverrides_min_donation_amount', 5);
        $params = array('@amount'=> $min_amount,'@currency' => '£');
        $form['payment_donation_amount']['#description'] = t("Minimum amount : @currency @amount",$params);
        $pm_class = str_replace('_','-',$pm->name);
        
        $form['actions']['#weight'] = 200;
        $form['actions']['#suffix'] = '</div><!-- suufix -->';
        $form['actions']['payment_donation_pay']['#value'] = $submitLabel;
        $form['info'] = array(
          '#type' => 'markup',
          '#markup' => '<div class="payment-info '.$pm_class.'" title="'.$method_label . ": " . $pm->title_generic.'"></div>',
          '#prefix' => '<div class="donation-controls">'
        );
        
        $default_currency_code = 'GBP';
        
        $options = array(
          'GBP' => 'UK £',
          'EUR' => 'Euro',
          'USD' => 'US $',
        );

        $form['payment_donation_amount']['currency_code'] = array(
          '#type' => 'select',
          '#options' => $options,
          '#default_value' => $default_currency_code,
          '#weight' => -10
        );
        
        $options = array(
          'single' => 'Just once',
          'month' => 'Monthly',
          'year' => 'Annually'
        );
        $form['cycle'] = array(
          '#type' => 'select',
          '#options' => $options,
          '#default_value' => 'single',
          '#weight' => 100
        );
                
        $form['payment_method']['#access'] = false;
        $form['min_amount'] = array(
          '#type' => 'hidden',
          '#value' => $min_amount,
          '#attributes' => array('id' => 'edit-min-donation-amount')
        );

        $default_amount = variable_get('ftoverrides_default_donation_amount', 10);
        $form['default_amount'] = array(
          '#type' => 'hidden',
          '#value' => $default_amount,
          '#attributes' => array('id' => 'edit-default-donation-amount')
        );
        $form['error_msg'] = array(
          '#type' => 'hidden',
          '#value' => t("Please enter a valid amount of at least @currency @amount",$params),
          '#attributes' => array('id' => 'edit-donation-error-msg')
        );
        $form['comma_error_msg'] = array(
          '#type' => 'hidden',
          '#value' => t("Please use only points for decimals"),
          '#attributes' => array('id' => 'edit-comma-error-msg')
        );
        
        if (is_array($form['#validate']) && !in_array('ftoverrides_donation_form_validate', $form['#validate'])) {
          $form['#validate'][] = 'ftoverrides_donation_form_validate';
        }
        $form['#after_build'][] = 'ftoverrides_donation_form_after_build';
      }
    }
  }
}

function theme_ftoverrides_donation_presets($vars = array()) {
  $html = '<div class="donation-presets-container hidden"><dl id="donation-presets">';
  if (isset($vars['items']) && is_array($vars['items'])) {
    foreach ($vars['items'] as $item) {
      $details = '';
      $attrs = array();
      $attrs['class'] = array('donation-'.$item['key']);
      $attrs['data-cycle'] = $item['cycle'];
      $attrs['data-limit'] = $item['cycle_limit'];
      $options = _ftoverrides_currency_value_options($item['amount']);
      if (!empty($item['amount'])) {
        switch ($item['cycle']) {
          case 'single':
            $attrs['data-amount'] = json_encode($item['amount']);
              break;
            default:
              $details .= _ftoverrides_currency_value_selector($item['key'], $options);
              break;
        }
      }
      $addendum = implode('/', $opt_vals);
      $attrs['title'] = $addendum . " (" .$item['description'] .")";
      $opt_vals = array_values($options);
      
      $html .= '<dt'.drupal_attributes($attrs).'>'.$item['title'].'</dt>';
      $html .= '<dd class="donation-'.$item['key'].'">'.$details.'</dd>';
    }
  }
  
  return $html . "</dl>\n</div>";
}

function _ftoverrides_currency_value_options($values) {
  $options = array();
  foreach ($values as $key => $val) {
    switch ($key) {
      case 'GBP':
        $prefix = '£';
        break;
      case 'EUR':
        $prefix = '€';
        break;  
      case 'USD':
        $prefix = '$';
        break;          
    }
    $options[$key . ":" . trim($val) ] = $prefix . ' ' . $val;
  }
  return $options;
}

function _ftoverrides_currency_value_selector($key = NULL,  array $options = array()) {
  
  $element = array(
    '#options' => $options,
    '#name' => 'donation_preset_' . $key,
    '#id' => 'edit-donation-preset-' . $key
  );
  return theme_select(array('element' => $element));
}

function ftoverrides_donation_presets($context = 'donate') {
  $default = array();
  switch ($context) {
    case 'join':
      $default = ftoverrides_donation_presets_join();
      break;
    default:
      $default = ftoverrides_donation_presets_donate();
      $context = 'donate';
      break;
  }
  return variable_get('ftoverrides_donation_presets_'.$context,$default);
}

function ftoverrides_donation_presets_donate() {
  $default = array();
  $default[] = array(
    'key' => 'monthly',
    'title' => 'Give monthly',
    'description' => 'max. 52 instalments',
    'cycle' => 'month',
    'cycle_limit' => 52,
    'amount' => array('GBP' => 2, 'EUR' => 3, 'USD' => 3)
  );

  $GBP_def = variable_get('ftoverrides_default_donation_amount', 10);
  $EUR_def = floor($GBP_def * 1.5);
  $USD_def = floor($GBP_def * 1.5);
  
  $default[] = array(
    'key' => 'single',
    'title' => 'Single payment',
    'cycle' => 'single',
    'cycle_limit' => 1,
    'amount' => array('GBP' => $GBP_def, 'EUR' => $EUR_def, 'USD' => $USD_def ),
  );
  return $default;
}

function ftoverrides_donation_presets_join() {
  $default = array();
  $default[] = array(
    'key' => 'monthly',
    'title' => 'Monthly',
    'description' => 'max. 52 instalments',
    'cycle' => 'month',
    'cycle_limit' => 52,
    'amount' => array('GBP' => 2, 'EUR' => 3, 'USD' => 3)
  );
  $default[] = array(
    'key' => 'annual',
    'title' => 'Annual',
    'description' => '5 instalments',
    'cycle' => 'year',
    'cycle_limit' => 52,
    'amount' => array('GBP' => 24, 'EUR' => 36, 'USD' => 36)
  );
  
  return $default;
}

function ftoverrides_donation_form_validate(&$form,&$form_state) {
  $values = $form_state['values'];
  if (isset($values['payment_donation_amount']) && isset($values['payment_donation_amount']['currency_code'])) {
    $cc = $values['payment_donation_amount']['currency_code'];
    if (is_string($cc) && strlen($cc) === 3) {
      $form['payment_donation_amount']['#currency_code'] = $cc;
      $form['payment_donation_amount']['currency_code']['#default_value'] = $cc;
      if (isset($form_state['payment']) && is_object($form_state['payment'])) {
        $form_state['payment']->currency_code = $cc;
      }
    }
     $cycle = $values['cycle'];
     if ($cycle != 'single') {
       if (isset($values['limit'])) {
         $limit = $values['limit'];
       } else {
         switch ($cycle) {
           case 'month':
             $limit = 52;
             break;
           case 'year':
             $limit = 10;
             break;
         }
       }
       $form_state['payment']->context_data['cycle'] = $cycle;
       $form_state['payment']->context_data['cycle_limit'] = $limit;
     }
     $type = $values['context'];
     if (!empty($type)) {
       $form_state['payment']->context_data['type'] = $type;
     }
  }
}

function ftoverrides_block_view_alter(&$data, $block) {
  if ($block->module == 'payment_donation' && $block->delta == 'payment_donation') {
    $context = request_path();
    $parts = explode('/',$context);
    if (count($parts)>1) {
      $context = array_shift($parts);
    }
    switch ($context) {
      case 'join';
          $block->title = "Join Online";
        break;
    }
  }
}

function ftoverrides_donation_form_after_build($form, &$form_state) {
  drupal_add_js(drupal_get_path('module','ftoverrides') . '/js/donate.js');
  if (is_array($form['#validate']) && !in_array('ftoverrides_donation_form_validate', $form['#validate'])) {
    $form['#validate'][] = 'ftoverrides_donation_form_validate';
  }
  return $form;
}

function ftoverrides_form_block_admin_configure_alter(&$form,&$form_state,$form_id) {
  if (isset($form['module']) && $form['module']['#value'] == 'payment_donation') {
    module_load_include('inc','ftoverrides','ftoverrides.edit');
    _ftoverrides_form_block_admin_configure_alter($form,$form_state);
  }
}

function ftoverrides_donation_block_admin_configure_submit(&$form,&$form_state) {
  if (isset($form_state['values']['ftoverrides_min_donation_amount'])) {
    module_load_include('inc','ftoverrides','ftoverrides.edit');
    _ftoverrides_donation_block_admin_configure_submit($form_state['values']);
  }
}

function ftoverrides_shopify_detail_link($field) {
	if ($entity = _ftoverrides_extra_entity_from_ds_field($field)) {
		$product_link = _ftoverrides_get_shopfify_product_link($entity);
		if (!empty($product_link)) {
      $details_label = variable_get('ftoverrides_shopify_product_view_details','View details');
      $details_label_long = variable_get('ftoverrides_shopify_product_view_details_long','View product details page on our shopify site');
      $opts = array('attributes' => array('class' => array('shopify-product-link'),'title' => $details_label_long));
			return l($details_label, $product_link, $opts);
		}
	}
}

function ftoverrides_form_paypal_payment_pps_form_redirect_alter(&$form,&$form_state,$form_id) {
  $payment = NULL;
  if (!empty($form_state['build_info']['args']) && is_array($form_state['build_info']['args'])) {
    foreach ($form_state['build_info']['args'] as $arg) {
      if (is_object($arg) && $arg instanceof Payment) {
        $payment = $arg;
        break;
      }
    }
  }
  if (is_object($payment)) {
    if (isset($payment->context_data)) {
      $type = 'donate';
      if (isset($payment->context_data['type'])) {
        $type = $payment->context_data['type'];
      }
      
      if (isset($payment->context_data['cycle'])) {
        switch ($type) {
          case 'join':
            $name = t("Free Tibet Membership");
            break;
          default:
            $name = t("Regular Donation to Free Tibet");
            break;
        }
          switch ($payment->context_data['cycle']) {
            case 'month':
              $unit = 'M';
              $name .= ": " . t("Monthly");
              break;
            case 'year':
              $unit = 'Y';
              $name .= ": " . t("Yearly");
              break;  
            default:
              $unit = NULL;
              break;
          }
          
          if (!empty($unit)) {
            $limit = $payment->context_data['cycle_limit'];
            $form['item_name_1']['#value'] = $name;
            $form['p3'] = array(
              '#type' => 'hidden',
              '#value' => $limit,
            );
            $form['t3'] = array(
              '#type' => 'hidden',
              '#value' => $unit,
            );
            $form['src'] = array(
              '#type' => 'hidden',
              '#value' => 1,
            );
            $form['srt'] = array(
              '#type' => 'hidden',
              '#value' => $limit,
            );
            $weight = -200;
            foreach ($form as $key => $data) {
              if (strpos($key,'#') !== 0 && is_array($data) && isset($data['#type'])) {
                switch ($data['#type']) {
                  case 'hidden':
                    $form[$key]['#weight'] = $weight;
                    $weight++;
                    break;
                }
              }
            }
          }
          $form['message']['#weight'] = 1000;
      }
    }
  }
}

function ftoverrides_shopify_title_link($field) {
	if ($entity = _ftoverrides_extra_entity_from_ds_field($field)) {
		$product_link = _ftoverrides_get_shopfify_product_link($entity);
		if (!empty($product_link)) {
      $details_label_long = variable_get('ftoverrides_shopify_product_view_details_long','View product details page on our shopify site');
      $opts = array('attributes' => array('class' => array('shopify-product-link'),'title' => $details_label_long));
			return l($entity->title, $product_link, $opts);
		}
	}
}

function ftoverrides_shopify_image_link($field) {
	if ($entity = _ftoverrides_extra_entity_from_ds_field($field)) {
		$product_link = _ftoverrides_get_shopfify_product_link($entity);
		if (!empty($product_link)) {
      $details_label_long = variable_get('ftoverrides_shopify_product_view_details_long','View product details page on our shopify site');
      $opts = array('attributes' => array('class' => array('shopify-product-link'),'title' => $details_label_long), 'html' => TRUE);
      $mode = variable_get('ftoverrides_shopify_product_teaser_image_display_mode',FTOVERRIDES_SHOPIFY_PRODUCT_TEASER_IMAGE_DISPLAY_MODE);
      //$items = field_get_items('shopify_product',$entity,'shopify_product_images');
      if (!empty($entity->shopify_product_images)) {
        // first last image
        foreach ($entity->shopify_product_images as $lang => $data) {
          if (is_string($lang) && is_array($data) && isset($data[0])) {
            if ($mode == 'last') {
              $image_items = array(array_pop($data));
            } else {
              $image_items = array(array_unshift($data));
            }
            $entity->shopify_product_images[$lang] = $image_items;
          }
        }
        $display = array('settings' => array('image_style' => 'shopify_product_thumbnail'),'label' => 'hidden');
        $view = field_view_field('shopify_product',$entity,'shopify_product_images',$display);
        $html = render($view);
        return l($html, $product_link, $opts);
      }
		}
	}
}

function _ftoverrides_extra_entity_from_ds_field($field) {
  if (isset($field['entity']) && is_object($field['entity'])) {
      return $field['entity'];
  }
  return false;
}

function _ftoverrides_get_shopfify_product_link($entity) {
  $base_url = '';
  if (is_object($entity)) {
  	$handle = $entity->handle;
  	if (!empty($handle)) {
  		$base_url = variable_get('ftoverrides_shopify_domain','http://shop.freetibet.org');
      $product_prefix = variable_get('ftoverrides_shopify_product_prefix','products');
    }
    if (!empty($product_prefix)) {
      $base_url .= '/' . $product_prefix;
    }
  }
  return $base_url . '/' . $handle;
}
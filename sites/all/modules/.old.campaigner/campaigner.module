<?php
  /**
   * @file
   * A campaigning module for online petitions
   */
// Include features code
  include_once dirname(__FILE__) . '/campaigner.features.inc';
  /**
   * Implements validation from the Form API.
   *
   * @param $form
   *   A structured array containing the elements and properties of the form.
   * @param $form_state
   *   An array that stores information about the form's current state
   *   during processing.
   */
  function campaigner_form_validate($form, &$form_state) {
    $petitions_path     = $form_state['values']['campaigner_petitions_path'];
    $email_targets_path = $form_state['values']['campaigner_email_targets_path'];
//  if (){
//    form_set_error('campaigner_petitions_path', t('Error message'));
//  }
  }


  /**
   * Implements hook_help.
   *
   * Displays help and module information.
   *
   * @param path
   *   Which path of the site we're using to display help
   * @param arg
   *   Array that holds the current path as returned from arg() function
   */
  function campaigner_help($path, $arg) {
    switch ($path) {
      case "admin/help#campaigner":
        return '<p>' . t("Provides for the creation of actions for online campaigning") . '</p>';
        break;
    }
  }


  /**
   * Implements hook_menu().
   */
  function campaigner_menu() {
    $items = array();

    $items['admin/config/content/campaigner'] = array(
      'title'            => 'Campaigner settings',
      'description'      => 'Configuration for Campaigner module',
      'page callback'    => 'drupal_get_form',
      'page arguments'   => array('campaigner_config_form'),
      'access arguments' => array('access administration pages'),
      'file'             => 'includes/campaigner_config_forms.inc',
      'type'             => MENU_NORMAL_ITEM,
    );

    $petitions_path                     = variable_get('campaigner_petitions_path', 'petitions');
    $items[$petitions_path . '/%/edit'] = array(
      'title'            => 'redirect',
      'page callback'    => 'campaigner_action_edit',
      'page arguments'   => array(1),
      'access arguments' => array('access campaigner content'),
      'type'             => MENU_CALLBACK, //Will not appear in Navigation menu.
    );

    $items[$petitions_path . '/%'] = array(
      'title callback'   => '_petitions_title',
      'title arguments'  => array(1),
      'page callback'    => '_petitions_page',
      'page arguments'   => array(1),
      'access arguments' => array('access campaigner content'),
      'file'             => 'includes/campaigner_petition_forms.inc',
      'type'             => MENU_CALLBACK, //Will not appear in Navigation menu.
    );


    $email_targets_path                     = variable_get('campaigner_email_targets_path', 'email_targets');
    $items[$email_targets_path . '/%']      = array(
      'title callback'   => '_email_targets_title',
      'title arguments'  => array(1),
      'page callback'    => '_email_targets_page',
      'page arguments'   => array(1),
      'access arguments' => array('access campaigner content'),
      'file'             => 'includes/campaigner_email_forms.inc',
      'type'             => MENU_CALLBACK, //Will not appear in Navigation menu.
    );
    $items[$email_targets_path . '/%/edit'] = array(
      'title'            => 'redirect',
      'page callback'    => 'campaigner_action_edit',
      'page arguments'   => array(1),
      'access arguments' => array('access campaigner content'),
      'type'             => MENU_CALLBACK, //Will not appear in Navigation menu.
    );

    $items["admin/config/content/campaigner/geos/rebuildcache"] = array(
      'title'            => "Rebuild GEOS cache",
      'page callback'    => "campaigner_rebuild_geos_cache",
      'access arguments' => array("access administration pages"),
      'type'             => MENU_CALLBACK,
    );

    $items['campaigner/social_proof/%'] = array(
      'title'           => "social proof",
      "description"     => "AJAX callback to get latest signatures",
      'page callback'   => 'campaigner_social_proof',
      'page arguments'  => array(2),
      'type'            => MENU_CALLBACK,
      'access callback' => TRUE
    );

    $items['campaigner/signature/delete/%'] = array(
      'title'            => "delete signature",
      'description'      => "Callback to delete a signature",
      'page callback'    => "campaigner_delete_signature",
      'page arguments'   => array(3),
      'type'             => MENU_CALLBACK,
      'access arguments' => array("delete campaigner signature")
    );

    $items['campaigner/signature/spam/%'] = array(
      'title'            => "Mark signature as spam",
      'description'      => "Callback to mark a signature as spam",
      'page callback'    => "campaigner_delete_signature",
      'page arguments'   => array(3),
      'type'             => MENU_CALLBACK,
      'access arguments' => array("delete campaigner signature")
    );

    $items['campaigner/signature/unspam/%'] = array(
      'title'            => "Mark signature as not spam",
      'description'      => "Callback to mark a signature as not spam",
      'page callback'    => "campaigner_unspam_signature",
      'page arguments'   => array(3),
      'type'             => MENU_CALLBACK,
      'access arguments' => array("delete campaigner signature")
    );

    $items['admin/config/content/campaigner/spam/train'] = array(
      "title"            => "Train spam filter",
      "page callback"    => "campaigner_train_spam_filter",
      "type"             => MENU_CALLBACK,
      "access arguments" => array("train campaigner spam filter")
    );

    /*$items['admin/config/content/campaigner/regions/gen_emails'] = array(
      'title' => "Generate emails",
      'page callback' => "campaigner_gen_emails",
      'type' => MENU_CALLBACK,
      'access callback' => "campaigner_gen_emails_gatekeeper"
    );

$items['admin/config/content/campaigner/regions/missing'] = array(
      'title' => "Fill in missing regions",
      'page callback' => "campaigner_fill_missing_regions",
      'type' => MENU_CALLBACK,
      'access callback' => "campaigner_gen_emails_gatekeeper"
    );*/

    return $items;
  }

function campaigner_fill_missing_regions(){
  $csvFileHandler = fopen(dirname(__FILE__) . '/assets/country_update.csv', "r");
  $header = fgetcsv($csvFileHandler, 0, ",");
  $count = 0;
  while (($row = fgetcsv($csvFileHandler, 0, ",")) !== false){
    $query = new EntityFieldQuery();
    $query->entityCondition("entity_type", "node");
    $query->entityCondition("bundle", "campaigner_region");
    $query->propertyCondition("title", $row[0]);
    $result = $query->execute();
    if (!empty($result) && !empty($result['node'])){
      $nodes = node_load_multiple(array_keys($result['node']));
      if (count($nodes) === 1){
        $node = array_shift($nodes);
        $node->field_campaigner_area_polygon[$node->language][0] = array(
          'wkt' => $row[1],
          'lat' => $row[2],
          'lon' => $row[3]
        );
        node_save($node);
        $count++;
      }

    }
  }
  drupal_set_message("Updated " . $count . " countries");
  drupal_goto();
}

function campaigner_gen_emails_gatekeeper(){
  global $user;
  // Check that the user is an admin
  return in_array("administrator", $user->roles);
}

function campaigner_gen_emails(){
  $query = new EntityFieldQuery();
  $query->entityCondition("entity_type", "node");
  $query->entityCondition("bundle", "campaigner_region");
  $result  = $query->execute();
  $nodes   = $nodes = node_load_multiple(array_keys($result['node']));
  $count = 0;
  if (!empty($nodes)){
    foreach ($nodes as $node){
      $email = preg_replace("/[^A-Za-z0-9]/", '', strtolower($node->title));
      if (empty($node->field_campaigner_target_email) ||
        $node->field_campaigner_target_email[$node->language][0]['value'] === "mail+" . $email . "@freetibet.org"){
        $newValue = "campaigns+" . $email . "@freetibet.org";
        $node->field_campaigner_target_email = array(
          $node->language => array(
            0 => array(
              "value" => $newValue
            )
          )
        );
        node_save($node);
        $count++;
      }
    }
  }
  drupal_set_message("Updated " . $count . " countries");
  drupal_goto();
}

  /**
   * Mark a signature as not being spam.
   *
   * @param $signatureID
   */
  function campaigner_unspam_signature($signatureID) {
    $ajax   = isset($_GET['ajax']) && $_GET['ajax'] === "true" ? TRUE : FALSE;
    $record = campaigner_update_signature_spam_status($signatureID, 0);
    if ($ajax) {
      drupal_json_output($record);
    } else {
      drupal_set_message(t("Signature with id @id marked as not spam", array("@id" => $signatureID)));
      drupal_goto("/");
    }
  }

  /**
   *
   */
  function campaigner_train_spam_filter() {
    require_once dirname(__FILE__) . '/includes/libraries/SpamFilter.php';
    // first we need to get our spam filterer
    $filter = new SpamFilter();
    // Now we want to wipe the table
    $filter->resetSpamTraining();
    // Get our training data
    $trainingDataFile = dirname(__FILE__) . '/assets/spamtrain.csv';
    if (file_exists($trainingDataFile)) {
      $handle = fopen($trainingDataFile, "r");
      if ($handle) {
        $batch = array(
          "title"      => t("Training spam filter"),
          "operations" => array());

        $row = fgetcsv($handle, 0);
        while ($row !== FALSE) {
          $batch['operations'][] = array("campaigner_train_spam_item", array($row[0], $row[1]));
          $row                   = fgetcsv($handle, 0);
        }
        batch_set($batch);
        batch_process("admin/config/content/campaigner");
      }
    }
  }

  /**
   * For a specific text, present the text to the filter training functionality.
   *
   * @param $text
   * @param $isSpam
   * @param $context
   */
  function campaigner_train_spam_item($text, $isSpam, $context = array()) {
    require_once dirname(__FILE__) . '/includes/libraries/SpamFilter.php';
    $filter = new SpamFilter();
    $filter->train($text, $isSpam);
  }

  /**
   * @param $signatureID
   *
   * @return mixed
   */
  function campaigner_get_signature_record($signatureID) {
    $signatureQuery = db_select("signatures", "s");
    $signatureQuery->fields("s");
    $signatureQuery->condition("id", $signatureID, "=");
    $result = $signatureQuery->execute()->fetchObject();
    return $result;
  }

  /**
   * @param $signatureID
   * @param $isSpam
   *
   * @return mixed
   */
  function campaigner_update_signature_spam_status($signatureID, $isSpam) {
    $isSpam = (int)$isSpam;
    $signature = campaigner_get_signature_record($signatureID);
    if ($signature) {
      $signature->spam = $isSpam;
      drupal_write_record("signatures", $signature, array("id"));
    }
    $record       = campaigner_get_signature_record($signatureID);
    $record->link = $record->spam ?
      l(t("Mark as not spam"), "campaigner/signature/unspam/" . $signatureID, array("attributes" => array("class" => "spamlink"))) :
      l(t("Mark as spam"), "campaigner/signature/spam/" . $signatureID, array("attributes" => array("class" => "spamlink")));
    campaigner_train_spam_item($record->comments, $record->spam);
    return $record;
  }

  /**
   * Delete a signature.
   *
   * @param $signatureID
   */
  function campaigner_delete_signature($signatureID) {
    $ajax   = isset($_GET['ajax']) && $_GET['ajax'] === "true" ? TRUE : FALSE;
    $record = campaigner_update_signature_spam_status($signatureID, 1);
    if ($ajax) {
      drupal_json_output($record);
    } else {
      drupal_set_message(t("Signature with id @id marked as spam", array("@id" => $signatureID)));
      drupal_goto("/");
    }
  }

  function campaigner_validate_comment($element, &$form_state, $form){
    require_once dirname(__FILE__) . '/includes/libraries/SpamFilter.php';
    $filter = new SpamFilter();
    $node = node_load($form_state['build_info']['args'][0]);
    $cutoff = 90;
    $score = (int) (100 * $filter->checkForSpam($element['#value']));
    if ($score >= $cutoff){
      $message = (!empty($node) && !empty($node->field_spam_block_message)) ? $node->field_spam_block_message["und"][0]['value'] : t("The spam filter has indicated that this comment has a high chance of being spam. You can change the comment or empty the comment box to continue.");
      form_error($element, $message);
      campaigner_train_spam_item($element['#value'], 1);
      return false;
    }
    campaigner_train_spam_item($element['#value'], 0);
    return true;
  }

  /**
   * AJAX callback for social proof.
   *
   * @param       $action
   *
   * @internal param array $fields An array of fields, so that calculated fields can be calculated.
   */
  function campaigner_social_proof($action) {
    $node   = node_load($action);
    $fields = array();
    if (!empty($node->field_social_proof_fields)) {
      $rawFields = $node->field_social_proof_fields['und'];
      if (!empty($rawFields)) {
        foreach ($rawFields as $field) {
          $fields[] = $field['value'];
        }
      }
    }
    $signatures = campaigner_get_social_proof($action, $fields);
    return drupal_json_output($signatures);
  }

  /**
   * Helper that allows you to get the social proof for a given action.
   *
   * @param $action
   *
   * @param $fields
   *
   * @return mixed
   */
  function campaigner_get_social_proof($action, $fields) {
    module_load_include('inc', 'campaigner', 'includes/campaigner_signatures');
    $signatures = get_signatures_action($action, array("start" => 0, "length" => 5), array("field" => "s.id", "direction" => "desc"), TRUE);
    if (!empty($fields)) {
      if (in_array("elapsed", $fields)) {
        $now = time();

      }
    }
    $fields[] = "created";
    if (!empty($signatures)) {
      foreach ($signatures as $signature) {
        if (in_array("elapsed", $fields)) {
          if ($signature->created > 0) {
            $elapsed = $now - $signature->created;
            if ($elapsed > 31449600) {
              $signature->elapsed = floor($elapsed / 31449600);
              $signature->elapsed .= ($signature->elapsed > 1) ? t(" years ago") : t(" year ago");
            } else if ($elapsed > 604800) {
              $signature->elapsed = floor($elapsed / 604800);
              $signature->elapsed .= ($signature->elapsed > 1) ? t(" weeks ago") : t(" week ago");
            } else if ($elapsed > 86400) {
              $signature->elapsed = floor($elapsed / 86400);
              $signature->elapsed .= ($signature->elapsed > 1) ? t(" days ago") : t(" day ago");
            } else if ($elapsed > 3600) {
              $signature->elapsed = floor($elapsed / 3600);
              $signature->elapsed .= ($signature->elapsed > 1) ? t(" hours ago") : t(" hour ago");
            } else if ($elapsed > 60) {
              $signature->elapsed = floor($elapsed / 60);
              $signature->elapsed .= ($signature->elapsed > 1) ? t(" minutes ago") : t(" minute ago");
            } else {
              $signature->elapsed = t("less than") . " 1" . t(" minute ago");
            }
          } else {
            $signature->elapsed = '';
          }
        }
        // For PHP 5.2 as we can't use auto escaping (a PHP 5.3 feature)
        $signature->comments = nl2br(strip_tags($signature->comments));
        foreach ($signature as $field => $value) {
          if (!in_array($field, $fields)) {
            unset($signature->$field);
          } else {
            $signature->$field = campaigner_escape_json_string($value);
          }
        }
      }
    }

    return $signatures;
  }

  function campaigner_escape_json_string($value) {
    # list from www.json.org: (\b backspace, \f formfeed)
    $search  = array('\\', "\n", "\r", "\f", "\t", "\b", "'");
    $replace = array('\\\\', "", "", "\\f", "\\t", "\\b", "&#039");
    $json    = str_replace($search, $replace, $value);
    return $json;
  }

  function campaigner_theme() {
    global $base_url;
    $items                            = array();
    $path                             = drupal_get_path("module", "campaigner") . '/templates';
    $items['campaigner_thermometer']  = array(
      'variables' => array("thermometer_count" => 0, "thermometer_target" => 1000, "showCount" => FALSE),
      'template'  => "thermometer",
      'path'      => $path
    );
    $items['campaigner_social_proof'] = array(
      'variables' => array("proofText" => "Recent Signatures", "proof" => '', "fields" => array("name", "region_title")),
      'template'  => "social_proof",
      'path'      => $path
    );
    $items['campaigner_donate']       = array(
      'variables' => array(),
      'template'  => "donate",
      'path'      => $path
    );
    $items['campaigner_share']        = array(
      'variables' => array(),
      'template'  => "share",
      "path"      => $path
    );
    return $items;
  }


  /**
   * Implements hook_node_view().
   */
  function campaigner_node_view($node, $view_mode, $langcode) {
    if ($node->type == 'campaigner_petition' && $view_mode == 'full') {
      $petitions_path = variable_get('campaigner_petitions_path', 'petitions');
      drupal_goto($petitions_path . '/' . $node->nid);
    } else if ($node->type == 'campaigner_email_target' && $view_mode == 'full') {
      $email_targets_path = variable_get('campaigner_email_targets_path', 'email_targets');
      drupal_goto($email_targets_path . '/' . $node->nid);
    }
  }

  function campaigner_action_edit($nid) {
    drupal_goto("node/" . $nid . "/edit");
  }


  /**
   * Implements hook_permission().
   */
  function campaigner_permission() {
    return array(
      'access campaigner content'    => array(
        'title' => t('Access content for the Campaigner module'),
      ),
      "delete campaigner signature"  => array(
        'title'       => t("Delete a signature from a petition or email"),
        'description' => t("This is intended to be used to remove spam from a petition/email")
      ),
      "train campaigner spam filter" => array(
        'title' => t("Train the campaigner comment spam filter"),
      )
    );
  }


  /**
   * Title callback: Petition page
   *
   * @see campaigner_menu()
   */
  function _petitions_title($petition_nid) {
    $petition_node = node_load($petition_nid);
    return $petition_node->title;
  }

  function _email_targets_title($email_target_nid) {
    $email_target_node = node_load($email_target_nid);
    return $email_target_node->title;
  }

  /**
   * Page callback: Petition page
   *
   * @see campaigner_menu()
   */
  function _petitions_page($petition_nid) {
    return drupal_get_form('campaigner_petition_form', $petition_nid);
  }

  function _email_targets_page($email_target_nid) {
    return drupal_get_form('campaigner_email_target_form', $email_target_nid);
  }


  /**
   * Update function to add the cache_geos table.
   */
  function campaigner_update_7001() {
    $schema = array(
      'description'  => 'Caches objects created by the GEOS PHP plugin for the campaigner module',
      'fields'       => array(
        'cid'           => array(
          'description' => 'The identifier for the cache item',
          'type'        => 'serial',
          'unsigned'    => TRUE,
          'not null'    => TRUE
        ),
        'entity_id'     => array(
          'description' => "Foreign key for the node",
          'type'        => "int",
          'unsigned'    => TRUE,
          'not null'    => TRUE,
          'default'     => 0
        ),
        'polygonobject' => array(
          'description' => "Serialised version of the polygon",
          'type'        => "text",
          'size'        => "big",
          'not null'    => TRUE
        ),
        'modified'      => array(
          'description' => "The last time this record was modified (UNIX timestamp)",
          'default'     => 0,
          'type'        => "int",
          'unsigned'    => TRUE,
          'not null'    => TRUE,
        )
      ),
      'primary key'  => array(
        'cid'
      ),
      'foreign keys' => array(
        'nodeid' => array(
          'table'   => "node",
          'columns' => array("entity_id" => "nid")
        )
      ),
      'unique keys'  => array(
        'entityid' => array(
          'entity_id'
        )
      )
    );
    db_create_table("cache_geos", $schema);
    return "Add the cache_geos table for the campaigner module";
  }

  /**
   * Seed the GEOS cache table for the campaigner module.
   *
   */
  function campaigner_update_7004() {
    $spec = array(
      'description' => "The centre of the polygon",
      'type'        => 'varchar',
      'length'      => 255,
      'not null'    => FALSE
    );
    db_add_field("cache_geos", "centre", $spec);
    return "Add additional data to the geos table";
  }

  /**
   * Add a name and identifier field to the signatures table
   */
  function campaigner_update_7005() {
    $spec = array(
      "description" => "Signer's real name",
      'type'        => "varchar",
      "length"      => 255,
      "not null"    => FALSE
    );
    db_add_field("signatures", "name", $spec);
    $spec = array(
      'description' => "Other identifier (e.g. IP address)",
      'type'        => "text",
      'size'        => "medium",
      'not null'    => FALSE
    );
    db_add_field("signatures", "identifier", $spec);
    return "Added identifier field and name field for signatures table";
  }

  /**
   * Add a created field to the signatures table
   */
  function campaigner_update_7006() {
    $spec = array(
      'description' => "Time petition was signed",
      'type'        => "int",
      'unsigned'    => TRUE,
      'not null'    => TRUE,
      'default'     => 0
    );
    db_add_field("signatures", "created", $spec);
    return "Added timestamp to signatures table";
  }

  /**
   * Add a comment field to the signatures table
   */
  function campaigner_update_7007() {
    $spec = array(
      'description' => "Comment made by signer",
      'type'        => "text",
      'size'        => "medium",
      'not null'    => FALSE
    );
    db_add_field("signatures", "comments", $spec);
    return "Added comments field to signatures table";
  }

  /**
   * Add a delete field to signatures to allow them to be hidden in stuff like social proof and signature counts.
   */
  function campaigner_update_7008() {
    $spec = array(
      'description' => "Allows a signature to be marked as spam",
      'type'        => "int",
      "size"        => "tiny",
      "not null"    => TRUE,
      "default"     => 0
    );
    db_add_field("signatures", "spam", $spec);
  }

  /**
   * Add a spam table for spam filtering.
   */
  function campaigner_update_7009() {
    $spec = array(
      'description' => 'Stores spam and spam ratings',
      'fields'      => array(
        'token'       => array(
          'description' => 'The token being scored, this is the primary key',
          'type'        => 'varchar',
          "length"      => 255,
          'not null'    => TRUE
        ),
        'spam_count'  => array(
          'description' => "The instances of this token being spam",
          'type'        => "int",
          'unsigned'    => TRUE,
          'not null'    => TRUE,
          'default'     => 0
        ),
        'ham_count'   => array(
          'description' => "The instances of this token being ham",
          'type'        => "int",
          'unsigned'    => TRUE,
          'not null'    => TRUE,
          'default'     => 0
        ),
        'spam_rating' => array(
          'description' => "The spam rating for the token",
          'default'     => 0.4,
          'type'        => "float",
          'unsigned'    => TRUE,
          'not null'    => TRUE,
        )
      ),
      'primary key' => array(
        'token'
      ),
    );
    db_create_table("spam", $spec);
    variable_set("campaigner_spam_good_total", 0);
    variable_set("campaigner_spam_bad_total", 0);
  }

/**
 * Add a first name and last name field to the signatures table.
 */
function campaigner_update_7010(){
  $first_name = array(
    'description' => "The first name of the signer",
    'type'        => "varchar",
    "length"      => 255,
    "not null"    => FALSE
  );
  $last_name = array(
    'description' => "The last name of the signer",
    'type'        => "varchar",
    "length"      => 255,
    "not null"    => FALSE
  );
  db_add_field("signatures", "first_name", $first_name);
  db_add_field("signatures", "last_name", $last_name);
}

/**
 * Add a user ID to the signatures table.
 */
function campaigner_update_7011(){
  $uid = array(
    'description' => "The User ID of the signer (if known)",
    'type'        => "int",
    "not null"    => FALSE,
    "unsigned" => TRUE
  );
  db_add_field("signatures", "uid", $uid);
}

  /**
   * Rebuilds the GEOS cache.
   */
  function campaigner_rebuild_geos_cache() {
    if (!class_exists("RegionCollection")) {
      require dirname(__FILE__) . '/includes/collections/RegionCollection.php';
    }
    $regions     = RegionCollection::fetchAll()->getAll();
    $result      = TRUE;
    $currentTime = time();
    $expiryTime  = $currentTime - variable_get("campaigner_geos_cache_invalidation", 86400);
    $updated     = 0;
    $batch       = array(
      "title"      => t("Generating cache"),
      "operations" => array());
    if (!empty($regions)) {
      /**
       * @var RegionModel $region
       */
      foreach ($regions as $region) {
        $modifiedTime = $region->getModified();
        if ($modifiedTime < $expiryTime) {
          $batch['operations'][] = array("campaigner_update_region_cache", array($region->getEntityId()));
        }

      }
    }
    batch_set($batch);
    batch_process("admin/config/content/campaigner");
  }

  function campaigner_update_region_cache($entityId, $context) {
    if (!class_exists("RegionCollection")) {
      require dirname(__FILE__) . '/includes/collections/RegionCollection.php';
    }
    $region = RegionCollection::getByEntityId($entityId)->getFirst();
    if ($region instanceof RegionModel) {
      $region->generatePolygon();
      return $region->updateCache();
    }
  }
